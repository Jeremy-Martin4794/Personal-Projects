# handles user input and displays current gameState object

import pygame as p
import chessEngine

width = height = 512 # used for the chess pieces
dimension = 8 # dimensions of the chess board
squareSize = height//dimension
maxFPS = 15
images = {}

# loading in the images (called only once)
def loadImages():
    pieces = ['bR', 'bN', 'bB', 'bQ', 'bK', 'bB', 'bN', 'bR', 'bP', 'wR', 'wN', 'wB', 'wQ', 'wK', 'wB', 'wN', 'wR', 'wP']
    for piece in pieces:
        images[piece] = p.transform.scale(p.image.load("Chess/pieceImages/" + piece + ".png"), (squareSize, squareSize))


# main will handle user input and updating graphics
def main():
    p.init()
    screen = p.display.set_mode((width, height))
    clock = p.time.Clock()
    screen.fill(p.Color("white"))
    gs = chessEngine.gameState()
    validMoves = gs.getValidMoves()
    moveMade = False # flag variable for when a move is made

    loadImages()
    running = True
    sqSelected = () # keeps track of last click of the user (tuple: (row, col))
    playerClicks = [] # keep track of player clicks (2 tuples: [(6,4), (4,4)])

    while running:
        for e in p.event.get():
            # just for quitting the game
            if e.type == p.QUIT:
                running = False

            # for mouse click events
            elif e.type == p.MOUSEBUTTONDOWN:
                location = p.mouse.get_pos() # location of mouse
                col = location[0]//squareSize
                row = location[1]//squareSize
                if sqSelected == (row, col): # if user clicks same square twice (undo action)
                    sqSelected = ()
                    playerClicks = []
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected) # append for both first and second clicks
                
                if len(playerClicks) == 2: # after 2nd click
                    move = chessEngine.Move(playerClicks[0], playerClicks[1], gs.board)
                    print(move.getChessNotation())
                    for i in range(len(validMoves)):
                        if move == validMoves[i]:
                            gs.makeMove(validMoves[i])
                            moveMade = True
                            sqSelected = () # reset user clicks
                            playerClicks = []
                    if not moveMade:
                        playerClicks = [sqSelected]
            
            # for undo move
            elif e.type == p.KEYDOWN:
                if e.key == p.K_u: # undo when 'u' is pressed
                    gs.undo()
                    moveMade = True
            
        if moveMade:
            validMoves = gs.getValidMoves()
            moveMade = False

        drawGameState(screen, gs)
        clock.tick(maxFPS)
        p.display.flip()

# handles all graphics within current game state
def drawGameState(screen, gs):
    drawBoard(screen) # draw squares on the board
    drawPieces(screen, gs.board) # draw pieces on top of squares

def drawBoard(screen):
    for r in range(dimension):
        for c in range(dimension):
            if (r+c)%2 == 0: color = p.Color("white")
            else: color = p.Color("gray")

            p.draw.rect(screen, color, p.Rect(c*squareSize, r*squareSize, squareSize, squareSize))

def drawPieces(screen, board):
    for r in range(dimension):
        for c in range(dimension):
            piece = board[r][c]

            if piece != "--":
                screen.blit(images[piece], p.Rect(c*squareSize, r*squareSize, squareSize, squareSize))

if __name__ == "__main__":
    main()





